#compdef golangci-lint

# -----------------------------------------------------------------------------
# The BSD-3-Clause License
#
# Copyright (c) 2018, Koichi Shiraishi
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of que nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------
#
# github.com/golangci/golangci-lint
#
# -----------------------------------------------------------------------------
#
# Smart, fast linters runner. Run it in cloud for every GitHub pull request on https://golangci.com
#
# Usage:
#   golangci-lint [flags]
#   golangci-lint [command]
#
# Available Commands:
#   config      Config
#   help        Help
#   linters     List current linters configuration
#   run         Run this tool in cloud on every github pull request in https://golangci.com for free (public repos)
#
# Flags:
#   -j, --concurrency int           Concurrency (default NumCPU) (default 12)
#       --cpu-profile-path string   Path to CPU profile output file
#   -h, --help                      help for golangci-lint
#       --mem-profile-path string   Path to memory profile output file
#   -v, --verbose                   verbose output
#
# Use "golangci-lint [command] --help" for more information about a command.
#
# -----------------------------------------------------------------------------
#
# Config
#
# Usage:
#   golangci-lint config [flags]
#   golangci-lint config [command]
#
# Available Commands:
#   path        Print used config path
#
# Flags:
#   -h, --help   help for config
#
# Global Flags:
#   -j, --concurrency int           Concurrency (default NumCPU) (default 12)
#       --cpu-profile-path string   Path to CPU profile output file
#       --mem-profile-path string   Path to memory profile output file
#   -v, --verbose                   verbose output
#
# Use "golangci-lint config [command] --help" for more information about a command.
#
# -----------------------------------------------------------------------------
#
# Print used config path
#
# Usage:
#   golangci-lint config path [flags]
#
# Flags:
#       --out-format string           Format of output: colored-line-number|line-number|json|tab|checkstyle|code-climate (default "colored-line-number")
#       --print-issued-lines          Print lines of code with issue (default true)
#       --print-linter-name           Print linter name in issue line (default true)
#       --issues-exit-code int        Exit code when issues were found (default 1)
#       --build-tags strings          Build tags
#       --deadline duration           Deadline for total work (default 1m0s)
#       --tests                       Analyze tests (*_test.go) (default true)
#       --print-resources-usage       Print avg and max memory usage of golangci-lint and total time
#   -c, --config PATH                 Read config from file path PATH
#       --no-config                   Don't read config
#       --skip-dirs strings           Regexps of directories to skip
#       --skip-files strings          Regexps of files to skip
#   -E, --enable strings              Enable specific linter
#   -D, --disable strings             Disable specific linter
#       --enable-all                  Enable all linters
#       --disable-all                 Disable all linters
#   -p, --presets strings             Enable presets (bugs|unused|format|style|complexity|performance) of linters. Run 'golangci-lint linters' to see them. This option implies option --disable-all
#       --fast                        Run only fast linters from enabled linters set (first run won't be fast)
#   -e, --exclude strings             Exclude issue by regexp
#       --exclude-use-default         Use or not use default excludes:
#                                       # errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
#                                       - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*printf?|os\.(Un)?Setenv). is not checked
#
#                                       # golint: Annoying issue about not having a comment. The rare codebase has such comments
#                                       - (comment on exported (method|function|type|const)|should have( a package)? comment|comment should be of the form)
#
#                                       # golint: False positive when tests are defined in package 'test'
#                                       - func name will be used as test\.Test.* by other packages, and that stutters; consider calling this
#
#                                       # govet: Common false positives
#                                       - (possible misuse of unsafe.Pointer|should have signature)
#
#                                       # staticcheck: Developers tend to write in C-style with an explicit 'break' in a 'switch', so it's ok to ignore
#                                       - ineffective break statement. Did you mean to break out of the outer loop
#
#                                       # gosec: Too many false-positives on 'unsafe' usage
#                                       - Use of unsafe calls should be audited
#
#                                       # gosec: Too many false-positives for parametrized shell calls
#                                       - Subprocess launch(ed with variable|ing should be audited)
#
#                                       # gosec: Duplicated errcheck checks
#                                       - G104
#
#                                       # gosec: Too many issues in popular repos
#                                       - (Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)
#
#                                       # gosec: False positive is triggered by 'src, err := ioutil.ReadFile(filename)'
#                                       - Potential file inclusion via variable
#                                      (default true)
#       --max-issues-per-linter int   Maximum issues count per one linter. Set to 0 to disable (default 50)
#       --max-same-issues int         Maximum count of issues with the same text. Set to 0 to disable (default 3)
#   -n, --new                         Show only new issues: if there are unstaged changes or untracked files, only those changes are analyzed, else only changes in HEAD~ are analyzed.
#                                     It's a super-useful option for integration of golangci-lint into existing large codebase.
#                                     It's not practical to fix all existing issues at the moment of integration: much better to not allow issues in new code.
#                                     For CI setups, prefer --new-from-rev=HEAD~, as --new can skip linting the current patch if any scripts generate unstaged files before golangci-lint runs.
#       --new-from-rev REV            Show only new issues created after git revision REV
#       --new-from-patch PATH         Show only new issues created in git patch with file path PATH
#       --fix                         Fix found issues (if it's supported by the linter)
#   -h, --help                        help for path
#
# Global Flags:
#   -j, --concurrency int           Concurrency (default NumCPU) (default 12)
#       --cpu-profile-path string   Path to CPU profile output file
#       --mem-profile-path string   Path to memory profile output file
#   -v, --verbose                   verbose output
#
# -----------------------------------------------------------------------------
#
# Help
#
# Usage:
#   golangci-lint help [flags]
#   golangci-lint help [command]
#
# Available Commands:
#   linters     Help about linters
#
# Flags:
#   -h, --help   help for help
#
# Global Flags:
#   -j, --concurrency int           Concurrency (default NumCPU) (default 12)
#       --cpu-profile-path string   Path to CPU profile output file
#       --mem-profile-path string   Path to memory profile output file
#   -v, --verbose                   verbose output
#
# Use "golangci-lint help [command] --help" for more information about a command.
#
# -----------------------------------------------------------------------------
#
# Help about linters
#
# Usage:
#   golangci-lint help linters [flags]
#
# Flags:
#   -h, --help   help for linters
#
# Global Flags:
#   -j, --concurrency int           Concurrency (default NumCPU) (default 12)
#       --cpu-profile-path string   Path to CPU profile output file
#       --mem-profile-path string   Path to memory profile output file
#   -v, --verbose                   verbose output
#
# -----------------------------------------------------------------------------
#
# List current linters configuration
#
# Usage:
#   golangci-lint linters [flags]
#
# Flags:
#       --out-format string           Format of output: colored-line-number|line-number|json|tab|checkstyle|code-climate (default "colored-line-number")
#       --print-issued-lines          Print lines of code with issue (default true)
#       --print-linter-name           Print linter name in issue line (default true)
#       --issues-exit-code int        Exit code when issues were found (default 1)
#       --build-tags strings          Build tags
#       --deadline duration           Deadline for total work (default 1m0s)
#       --tests                       Analyze tests (*_test.go) (default true)
#       --print-resources-usage       Print avg and max memory usage of golangci-lint and total time
#   -c, --config PATH                 Read config from file path PATH
#       --no-config                   Don't read config
#       --skip-dirs strings           Regexps of directories to skip
#       --skip-files strings          Regexps of files to skip
#   -E, --enable strings              Enable specific linter
#   -D, --disable strings             Disable specific linter
#       --enable-all                  Enable all linters
#       --disable-all                 Disable all linters
#   -p, --presets strings             Enable presets (bugs|unused|format|style|complexity|performance) of linters. Run 'golangci-lint linters' to see them. This option implies option --disable-all
#       --fast                        Run only fast linters from enabled linters set (first run won't be fast)
#   -e, --exclude strings             Exclude issue by regexp
#       --exclude-use-default         Use or not use default excludes:
#                                       # errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
#                                       - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*printf?|os\.(Un)?Setenv). is not checked
#
#                                       # golint: Annoying issue about not having a comment. The rare codebase has such comments
#                                       - (comment on exported (method|function|type|const)|should have( a package)? comment|comment should be of the form)
#
#                                       # golint: False positive when tests are defined in package 'test'
#                                       - func name will be used as test\.Test.* by other packages, and that stutters; consider calling this
#
#                                       # govet: Common false positives
#                                       - (possible misuse of unsafe.Pointer|should have signature)
#
#                                       # staticcheck: Developers tend to write in C-style with an explicit 'break' in a 'switch', so it's ok to ignore
#                                       - ineffective break statement. Did you mean to break out of the outer loop
#
#                                       # gosec: Too many false-positives on 'unsafe' usage
#                                       - Use of unsafe calls should be audited
#
#                                       # gosec: Too many false-positives for parametrized shell calls
#                                       - Subprocess launch(ed with variable|ing should be audited)
#
#                                       # gosec: Duplicated errcheck checks
#                                       - G104
#
#                                       # gosec: Too many issues in popular repos
#                                       - (Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)
#
#                                       # gosec: False positive is triggered by 'src, err := ioutil.ReadFile(filename)'
#                                       - Potential file inclusion via variable
#                                      (default true)
#       --max-issues-per-linter int   Maximum issues count per one linter. Set to 0 to disable (default 50)
#       --max-same-issues int         Maximum count of issues with the same text. Set to 0 to disable (default 3)
#   -n, --new                         Show only new issues: if there are unstaged changes or untracked files, only those changes are analyzed, else only changes in HEAD~ are analyzed.
#                                     It's a super-useful option for integration of golangci-lint into existing large codebase.
#                                     It's not practical to fix all existing issues at the moment of integration: much better to not allow issues in new code.
#                                     For CI setups, prefer --new-from-rev=HEAD~, as --new can skip linting the current patch if any scripts generate unstaged files before golangci-lint runs.
#       --new-from-rev REV            Show only new issues created after git revision REV
#       --new-from-patch PATH         Show only new issues created in git patch with file path PATH
#       --fix                         Fix found issues (if it's supported by the linter)
#   -h, --help                        help for linters
#
# Global Flags:
#   -j, --concurrency int           Concurrency (default NumCPU) (default 12)
#       --cpu-profile-path string   Path to CPU profile output file
#       --mem-profile-path string   Path to memory profile output file
#   -v, --verbose                   verbose output
#
# -----------------------------------------------------------------------------
#
# Run this tool in cloud on every github pull request in https://golangci.com for free (public repos)
#
# Usage:
#   golangci-lint run [flags]
#
# Flags:
#       --out-format string           Format of output: colored-line-number|line-number|json|tab|checkstyle|code-climate (default "colored-line-number")
#       --print-issued-lines          Print lines of code with issue (default true)
#       --print-linter-name           Print linter name in issue line (default true)
#       --issues-exit-code int        Exit code when issues were found (default 1)
#       --build-tags strings          Build tags
#       --deadline duration           Deadline for total work (default 1m0s)
#       --tests                       Analyze tests (*_test.go) (default true)
#       --print-resources-usage       Print avg and max memory usage of golangci-lint and total time
#   -c, --config PATH                 Read config from file path PATH
#       --no-config                   Don't read config
#       --skip-dirs strings           Regexps of directories to skip
#       --skip-files strings          Regexps of files to skip
#   -E, --enable strings              Enable specific linter
#   -D, --disable strings             Disable specific linter
#       --enable-all                  Enable all linters
#       --disable-all                 Disable all linters
#   -p, --presets strings             Enable presets (bugs|unused|format|style|complexity|performance) of linters. Run 'golangci-lint linters' to see them. This option implies option --disable-all
#       --fast                        Run only fast linters from enabled linters set (first run won't be fast)
#   -e, --exclude strings             Exclude issue by regexp
#       --exclude-use-default         Use or not use default excludes:
#                                       # errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
#                                       - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*printf?|os\.(Un)?Setenv). is not checked
#
#                                       # golint: Annoying issue about not having a comment. The rare codebase has such comments
#                                       - (comment on exported (method|function|type|const)|should have( a package)? comment|comment should be of the form)
#
#                                       # golint: False positive when tests are defined in package 'test'
#                                       - func name will be used as test\.Test.* by other packages, and that stutters; consider calling this
#
#                                       # govet: Common false positives
#                                       - (possible misuse of unsafe.Pointer|should have signature)
#
#                                       # staticcheck: Developers tend to write in C-style with an explicit 'break' in a 'switch', so it's ok to ignore
#                                       - ineffective break statement. Did you mean to break out of the outer loop
#
#                                       # gosec: Too many false-positives on 'unsafe' usage
#                                       - Use of unsafe calls should be audited
#
#                                       # gosec: Too many false-positives for parametrized shell calls
#                                       - Subprocess launch(ed with variable|ing should be audited)
#
#                                       # gosec: Duplicated errcheck checks
#                                       - G104
#
#                                       # gosec: Too many issues in popular repos
#                                       - (Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)
#
#                                       # gosec: False positive is triggered by 'src, err := ioutil.ReadFile(filename)'
#                                       - Potential file inclusion via variable
#                                      (default true)
#       --max-issues-per-linter int   Maximum issues count per one linter. Set to 0 to disable (default 50)
#       --max-same-issues int         Maximum count of issues with the same text. Set to 0 to disable (default 3)
#   -n, --new                         Show only new issues: if there are unstaged changes or untracked files, only those changes are analyzed, else only changes in HEAD~ are analyzed.
#                                     It's a super-useful option for integration of golangci-lint into existing large codebase.
#                                     It's not practical to fix all existing issues at the moment of integration: much better to not allow issues in new code.
#                                     For CI setups, prefer --new-from-rev=HEAD~, as --new can skip linting the current patch if any scripts generate unstaged files before golangci-lint runs.
#       --new-from-rev REV            Show only new issues created after git revision REV
#       --new-from-patch PATH         Show only new issues created in git patch with file path PATH
#       --fix                         Fix found issues (if it's supported by the linter)
#   -h, --help                        help for run
#
# Global Flags:
#   -j, --concurrency int           Concurrency (default NumCPU) (default 12)
#       --cpu-profile-path string   Path to CPU profile output file
#       --mem-profile-path string   Path to memory profile output file
#   -v, --verbose                   verbose output
#
# -----------------------------------------------------------------------------

function _golangci-lint() {
  local context curcontext=$curcontext state line expl ret=1
  declare -A opt_args

  _go_files() {
    _alternative '*:go file:_path_files -g "*.go(-.)"'
  }

  _go_packages() {
    local -a gopaths
    gopaths=("${(s/:/)$(go env GOPATH)}")
    gopaths+=("$(go env GOROOT)")
    for p in $gopaths; do
      _alternative ':go package:_path_files -W "$p/src" -/'
    done
    _alternative '*: :_go_files'
  }

  _all_flags() {
    _arguments -C \
      '--out-format=[Format of output \(default "colored-line-number"\)]:output format:(colored-line-number line-number json tab checkstyle code-climate)' \
      '--print-issued-lines[Print lines of code with issue \(default true\)]' \
      '--print-linter-name[Print linter name in issue line \(default true\)]' \
      '--issues-exit-code int [Exit code when issues were found \(default 1\)]:exit code]' \
      '--build-tags[Build tags]:build tags]' \
      '--deadline[Deadline for total work \(default 1m0s\)]:deadline duration' \
      '--tests[Analyze tests (*_test.go) \(default true\)]' \
      '--print-resources-usage[Print avg and max memory usage of golangci-lint and total time]' \
      {-c,--config}'[Read config from file path PATH]:config path:_files' \
      "--no-config[Don't read config]" \
      '--skip-dirs[Regexps of directories to skip]:skip dirs:_directories' \
      '--skip-files[Regexps of files to skip]:skip files:_files' \
      {-E,--enable}'[Enable specific linter]:enable linters' \
      {-D,--disable}'[Disable specific linter]:disable linters' \
      '--enable-all[Enable all linters]' \
      '--disable-all[Disable all linters]' \
      {-p,--presets}'[Enable presetsof linters.]:presets:(bugs unused format style complexity performance)' \
      "--fast[Run only fast linters from enabled linters set \(first run won't be fast\)]" \
      {-e,--exclude}'[Exclude issue by regexp]:exclude pattern' \
      '--exclude-use-default[Use or not use default excludes \(default true\)]' \
      '--max-issues-per-linter[Maximum issues count per one linter. Set to 0 to disable \(default 50\)]:maximum issues count' \
      '--max-same-issues[Maximum count of issues with the same text. Set to 0 to disable \(default 3\)]:maximum same issue count' \
      {-n,--new}'[Show only new issues: if there are unstaged changes or untracked files, only those changes are analyzed, else only changes in HEAD~ are analyzed.]' \
      '--new-from-rev[Show only new issues created after git revision REV]:git revision' \
      '--new-from-patch[Show only new issues created in git patch with file path PATH]:git patch file path:_files' \
      "--fix[Fix found issues \(if it's supported by the linter\)]"

    local -a global_flags
    global_flags=(
    {-j,--concurrency}'[Concurrency \(default NumCPU\)]'
    '--cpu-profile-path[Path to CPU profile output file]:output:_files'
    '--mem-profile-path[Path to memory profile output file]:output:_files'
    {-v,--verbose}'[verbose output]'
    {-h,--help}'[Show help]'
    )

    _values 'Global Flags' $global_flags
  }

  local -a commands
  commands=(
  'config:Config'
  'help:Help'
  'linters:List current linters configuration'
  'run:Run this tool in cloud on every github pull request in https://golangci.com for free \(public repos\)'
  )

  _arguments -C \
    "1: :{_describe 'golangci-lint commands' commands}" \
    '*:: :->args' \
    && ret=0

  case $words[1] in
    config)
      local -a config_commands
      config_commands=(
      'path:Print used config path'
      )

      _arguments \
        "1: :{_describe 'config commands' config_commands}" \
        '*:: :->args'

      case $words[1] in
        path)
          _arguments \
            '*: :_all_flags'
          ;;
      esac
      ;;

    help)
      local -a help_commands
      help_commands=(
      'linters:elp about linters'
      )

      _arguments \
        "1: :{_describe 'help command' help_commands}" \
        '*:: :->args'

      case $words[1] in
        linters)
          _arguments \
            '*: :_all_flags'
          ;;
      esac
      ;;

    linters)
      _arguments \
        '*: :_all_flags'
      ;;

    run)
      _arguments \
        '*:files or packages:_go_packages' \
        ':: :_all_flags'
      ;;
  esac

  return ret
}

_golangci-lint "$*"

# vim:ft=zsh:et:sts=2:sw=2
